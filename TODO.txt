Features

# Coordinate (interface)
Fields
- double x: x coordinate of this object
- double y: y coordinate of this object
Methods
- public double distanceTo(Coordinate other): return the distance from this object to other


# Train (implements Coordinate)
Fields
- private static final double ACCELERATION: the acceleration of trains
- double x: x coordinate of this object
- double y: y coordinate of this object
- private int id: id of this train
- private int capacity: maximum capacity of this train (with potential to exceed capacity with detriment to speed)
- private int numPassengers: number of passengers onboard
- private double speed: speed of this train right now
- private String 
Methods
- accessors & mutators 


# Station (implements Coordinate)
Fields
- double x: x coordinate of this object
- double y: y coordinate of this object
- private int[] inflowRange: the minimum and maximum inflow
- private int[] outflowRange: the minimum and maximum outflow
- private String name: name of this station
- private String id: id of this station
Methods
- accessors & mutators
- public double getTrainStopTime(): returns the stop time of each train at this station, depending on inflow & outflow
- private int getInflow(): returns the inflow at this station
- private int getOutflow(): returns the outflow at this station


# Terminus (extends Station)
Fields
Methods
- private int getOutflow(): returns -1 to signify that all passengers get off at this terminus


# Depot (extends Station)
Fields
- private int storage: number of trains stored at this depot
- private final int capacity: maximum number of trains that can be stored at this depot
Methods
- accessors & mutators
- public void sendTrain(): updates the storage for a train departure
- public void receiveTrain(): updates the storage for a train arrival


# Route
Fields
- holds objects of trains and stations and manages them
- coordinates of route itself
- private ArrayList<Train> trains: list of trains on this route
- private Station[] stations: list of stations on this route
Methods
- accessors & mutators
- public Station nextStation(int trainID): returns the next station on 
- using math to use coordinates as measurements to do distance calculations
- 2D, beginning with straight line route to start off and expand upon
- get - distanceTraveled, time, ETA, schedule, distanceToStation



# Person (implements Coordinate)
Fields
- stations boarded & alighted
- name (for fun)
- id
Methods
- distance travelled



# GUI 
- animated representation of trains and the ATC model
- accelerated time for longer period shown
- using JFrame and Swing
- sprites of train (scaled down but same dimensions) & passenger (same ratio)


